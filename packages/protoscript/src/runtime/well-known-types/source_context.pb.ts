// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/source_context.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * `SourceContext` represents information about the source of a
 * protobuf element, like the file in which it is defined.
 */
export interface SourceContext {
  /**
   * The path-qualified name of the .proto file that contained the associated
   * protobuf element.  For example: `"google/protobuf/source_context.proto"`.
   */
  fileName: string;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const SourceContext = {
  /**
   * Serializes SourceContext to protobuf.
   */
  encode: function (msg: PartialDeep<SourceContext>): Uint8Array {
    return SourceContext._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SourceContext from protobuf.
   */
  decode: function (bytes: ByteSource): SourceContext {
    return SourceContext._readMessage(
      SourceContext.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SourceContext with all fields set to their default value.
   */
  initialize: function (): SourceContext {
    return {
      fileName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SourceContext>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.fileName) {
      writer.writeString(1, msg.fileName);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SourceContext,
    reader: protoscript.BinaryReader,
  ): SourceContext {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.fileName = reader.readString();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const SourceContextJSON = {
  /**
   * Serializes SourceContext to JSON.
   */
  encode: function (msg: PartialDeep<SourceContext>): string {
    return JSON.stringify(SourceContextJSON._writeMessage(msg));
  },

  /**
   * Deserializes SourceContext from JSON.
   */
  decode: function (json: string): SourceContext {
    return SourceContextJSON._readMessage(
      SourceContextJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SourceContext with all fields set to their default value.
   */
  initialize: function (): SourceContext {
    return {
      fileName: "",
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SourceContext>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.fileName) {
      json["fileName"] = msg.fileName;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SourceContext, json: any): SourceContext {
    const _fileName_ = json["fileName"] ?? json["file_name"];
    if (_fileName_) {
      msg.fileName = _fileName_;
    }
    return msg;
  },
};
