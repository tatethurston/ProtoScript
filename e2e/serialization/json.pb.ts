// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: json.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export type Enum = "FOO_BAR" | "BAZ";

export interface Message {
  fooBar: string;
  g: bigint;
}

export interface SampleMessage {
  sampleMessage: Message;
  sampleEnum: Enum;
  sampleMap: Record<string, SampleMessage.SampleMap["value"] | undefined>;
  sampleRepeated: string[];
  sampleBool: boolean;
  sampleString: string;
  sampleBytes: Uint8Array;
  sampleInt32: number;
  sampleFixed32: number;
  sampleUint32: number;
  sampleInt64: bigint;
  sampleFixed64: bigint;
  sampleUint64: bigint;
  sampleFloat: number;
  sampleDouble: number;
  sampleTimestamp: protoscript.Timestamp;
  sampleDuration: protoscript.Duration;
  sampleStruct: protoscript.Struct;
}

export declare namespace SampleMessage {
  interface SampleMap {
    key: string;
    value: string;
  }
}

export interface OptionalMessage {
  fooBar?: string | null | undefined;
  g?: bigint | null | undefined;
}

export interface OptionalSampleMessage {
  sampleMessage?: OptionalMessage | null | undefined;
  sampleEnum?: Enum | null | undefined;
  sampleMap: Record<
    string,
    OptionalSampleMessage.SampleMap["value"] | undefined
  >;
  sampleRepeated: string[];
  sampleBool?: boolean | null | undefined;
  sampleString?: string | null | undefined;
  sampleBytes?: Uint8Array | null | undefined;
  sampleInt32?: number | null | undefined;
  sampleFixed32?: number | null | undefined;
  sampleUint32?: number | null | undefined;
  sampleInt64?: bigint | null | undefined;
  sampleFixed64?: bigint | null | undefined;
  sampleUint64?: bigint | null | undefined;
  sampleFloat?: number | null | undefined;
  sampleDouble?: number | null | undefined;
  sampleTimestamp?: protoscript.Timestamp | null | undefined;
  sampleDuration?: protoscript.Duration | null | undefined;
  sampleStruct?: protoscript.Struct | null | undefined;
}

export declare namespace OptionalSampleMessage {
  interface SampleMap {
    key: string;
    value: string;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Enum = {
  FOO_BAR: "FOO_BAR",
  BAZ: "BAZ",
  /**
   * @private
   */
  _fromInt: function (i: number): Enum {
    switch (i) {
      case 0: {
        return "FOO_BAR";
      }
      case 1: {
        return "BAZ";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as Enum;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: Enum): number {
    switch (i) {
      case "FOO_BAR": {
        return 0;
      }
      case "BAZ": {
        return 1;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const Message = {
  /**
   * Serializes Message to protobuf.
   */
  encode: function (msg: PartialDeep<Message>): Uint8Array {
    return Message._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes Message from protobuf.
   */
  decode: function (bytes: ByteSource): Message {
    return Message._readMessage(
      Message.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (): Message {
    return {
      fooBar: "",
      g: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<Message>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.fooBar) {
      writer.writeString(1, msg.fooBar);
    }
    if (msg.g) {
      writer.writeInt64String(2, msg.g.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: Message,
    reader: protoscript.BinaryReader,
  ): Message {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.fooBar = reader.readString();
          break;
        }
        case 2: {
          msg.g = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const SampleMessage = {
  /**
   * Serializes SampleMessage to protobuf.
   */
  encode: function (msg: PartialDeep<SampleMessage>): Uint8Array {
    return SampleMessage._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes SampleMessage from protobuf.
   */
  decode: function (bytes: ByteSource): SampleMessage {
    return SampleMessage._readMessage(
      SampleMessage.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes SampleMessage with all fields set to their default value.
   */
  initialize: function (): SampleMessage {
    return {
      sampleMessage: Message.initialize(),
      sampleEnum: Enum._fromInt(0),
      sampleMap: {},
      sampleRepeated: [],
      sampleBool: false,
      sampleString: "",
      sampleBytes: new Uint8Array(),
      sampleInt32: 0,
      sampleFixed32: 0,
      sampleUint32: 0,
      sampleInt64: 0n,
      sampleFixed64: 0n,
      sampleUint64: 0n,
      sampleFloat: 0,
      sampleDouble: 0,
      sampleTimestamp: protoscript.Timestamp.initialize(),
      sampleDuration: protoscript.Duration.initialize(),
      sampleStruct: protoscript.Struct.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SampleMessage>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.sampleMessage) {
      writer.writeMessage(1, msg.sampleMessage, Message._writeMessage);
    }
    if (msg.sampleEnum && Enum._toInt(msg.sampleEnum)) {
      writer.writeEnum(2, Enum._toInt(msg.sampleEnum));
    }
    if (msg.sampleMap) {
      writer.writeRepeatedMessage(
        3,
        Object.entries(msg.sampleMap).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        SampleMessage.SampleMap._writeMessage,
      );
    }
    if (msg.sampleRepeated?.length) {
      writer.writeRepeatedString(4, msg.sampleRepeated);
    }
    if (msg.sampleBool) {
      writer.writeBool(5, msg.sampleBool);
    }
    if (msg.sampleString) {
      writer.writeString(6, msg.sampleString);
    }
    if (msg.sampleBytes?.length) {
      writer.writeBytes(7, msg.sampleBytes);
    }
    if (msg.sampleInt32) {
      writer.writeInt32(8, msg.sampleInt32);
    }
    if (msg.sampleFixed32) {
      writer.writeFixed32(9, msg.sampleFixed32);
    }
    if (msg.sampleUint32) {
      writer.writeUint32(10, msg.sampleUint32);
    }
    if (msg.sampleInt64) {
      writer.writeInt64String(11, msg.sampleInt64.toString() as any);
    }
    if (msg.sampleFixed64) {
      writer.writeFixed64String(12, msg.sampleFixed64.toString() as any);
    }
    if (msg.sampleUint64) {
      writer.writeUint64String(13, msg.sampleUint64.toString() as any);
    }
    if (msg.sampleFloat) {
      writer.writeFloat(14, msg.sampleFloat);
    }
    if (msg.sampleDouble) {
      writer.writeDouble(15, msg.sampleDouble);
    }
    if (msg.sampleTimestamp) {
      writer.writeMessage(
        17,
        msg.sampleTimestamp,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.sampleDuration) {
      writer.writeMessage(
        18,
        msg.sampleDuration,
        protoscript.Duration._writeMessage,
      );
    }
    if (msg.sampleStruct) {
      writer.writeMessage(
        19,
        msg.sampleStruct,
        protoscript.Struct._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: SampleMessage,
    reader: protoscript.BinaryReader,
  ): SampleMessage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          reader.readMessage(msg.sampleMessage, Message._readMessage);
          break;
        }
        case 2: {
          msg.sampleEnum = Enum._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          const map = {} as SampleMessage.SampleMap;
          reader.readMessage(map, SampleMessage.SampleMap._readMessage);
          msg.sampleMap[map.key.toString()] = map.value;
          break;
        }
        case 4: {
          msg.sampleRepeated.push(reader.readString());
          break;
        }
        case 5: {
          msg.sampleBool = reader.readBool();
          break;
        }
        case 6: {
          msg.sampleString = reader.readString();
          break;
        }
        case 7: {
          msg.sampleBytes = reader.readBytes();
          break;
        }
        case 8: {
          msg.sampleInt32 = reader.readInt32();
          break;
        }
        case 9: {
          msg.sampleFixed32 = reader.readFixed32();
          break;
        }
        case 10: {
          msg.sampleUint32 = reader.readUint32();
          break;
        }
        case 11: {
          msg.sampleInt64 = BigInt(reader.readInt64String());
          break;
        }
        case 12: {
          msg.sampleFixed64 = BigInt(reader.readFixed64String());
          break;
        }
        case 13: {
          msg.sampleUint64 = BigInt(reader.readUint64String());
          break;
        }
        case 14: {
          msg.sampleFloat = reader.readFloat();
          break;
        }
        case 15: {
          msg.sampleDouble = reader.readDouble();
          break;
        }
        case 17: {
          reader.readMessage(
            msg.sampleTimestamp,
            protoscript.Timestamp._readMessage,
          );
          break;
        }
        case 18: {
          reader.readMessage(
            msg.sampleDuration,
            protoscript.Duration._readMessage,
          );
          break;
        }
        case 19: {
          reader.readMessage(msg.sampleStruct, protoscript.Struct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  SampleMap: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SampleMessage.SampleMap>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SampleMessage.SampleMap,
      reader: protoscript.BinaryReader,
    ): SampleMessage.SampleMap {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

export const OptionalMessage = {
  /**
   * Serializes OptionalMessage to protobuf.
   */
  encode: function (msg: PartialDeep<OptionalMessage>): Uint8Array {
    return OptionalMessage._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes OptionalMessage from protobuf.
   */
  decode: function (bytes: ByteSource): OptionalMessage {
    return OptionalMessage._readMessage(
      OptionalMessage.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes OptionalMessage with all fields set to their default value.
   */
  initialize: function (): OptionalMessage {
    return {
      fooBar: undefined,
      g: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OptionalMessage>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.fooBar != undefined) {
      writer.writeString(1, msg.fooBar);
    }
    if (msg.g != undefined) {
      writer.writeInt64String(2, msg.g.toString() as any);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OptionalMessage,
    reader: protoscript.BinaryReader,
  ): OptionalMessage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.fooBar = reader.readString();
          break;
        }
        case 2: {
          msg.g = BigInt(reader.readInt64String());
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

export const OptionalSampleMessage = {
  /**
   * Serializes OptionalSampleMessage to protobuf.
   */
  encode: function (msg: PartialDeep<OptionalSampleMessage>): Uint8Array {
    return OptionalSampleMessage._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes OptionalSampleMessage from protobuf.
   */
  decode: function (bytes: ByteSource): OptionalSampleMessage {
    return OptionalSampleMessage._readMessage(
      OptionalSampleMessage.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes OptionalSampleMessage with all fields set to their default value.
   */
  initialize: function (): OptionalSampleMessage {
    return {
      sampleMessage: undefined,
      sampleEnum: undefined,
      sampleMap: {},
      sampleRepeated: [],
      sampleBool: undefined,
      sampleString: undefined,
      sampleBytes: undefined,
      sampleInt32: undefined,
      sampleFixed32: undefined,
      sampleUint32: undefined,
      sampleInt64: undefined,
      sampleFixed64: undefined,
      sampleUint64: undefined,
      sampleFloat: undefined,
      sampleDouble: undefined,
      sampleTimestamp: undefined,
      sampleDuration: undefined,
      sampleStruct: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OptionalSampleMessage>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.sampleMessage != undefined) {
      writer.writeMessage(1, msg.sampleMessage, OptionalMessage._writeMessage);
    }
    if (msg.sampleEnum != undefined) {
      writer.writeEnum(2, Enum._toInt(msg.sampleEnum));
    }
    if (msg.sampleMap) {
      writer.writeRepeatedMessage(
        3,
        Object.entries(msg.sampleMap).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        OptionalSampleMessage.SampleMap._writeMessage,
      );
    }
    if (msg.sampleRepeated?.length) {
      writer.writeRepeatedString(4, msg.sampleRepeated);
    }
    if (msg.sampleBool != undefined) {
      writer.writeBool(5, msg.sampleBool);
    }
    if (msg.sampleString != undefined) {
      writer.writeString(6, msg.sampleString);
    }
    if (msg.sampleBytes?.length) {
      writer.writeBytes(7, msg.sampleBytes);
    }
    if (msg.sampleInt32 != undefined) {
      writer.writeInt32(8, msg.sampleInt32);
    }
    if (msg.sampleFixed32 != undefined) {
      writer.writeFixed32(9, msg.sampleFixed32);
    }
    if (msg.sampleUint32 != undefined) {
      writer.writeUint32(10, msg.sampleUint32);
    }
    if (msg.sampleInt64 != undefined) {
      writer.writeInt64String(11, msg.sampleInt64.toString() as any);
    }
    if (msg.sampleFixed64 != undefined) {
      writer.writeFixed64String(12, msg.sampleFixed64.toString() as any);
    }
    if (msg.sampleUint64 != undefined) {
      writer.writeUint64String(13, msg.sampleUint64.toString() as any);
    }
    if (msg.sampleFloat != undefined) {
      writer.writeFloat(14, msg.sampleFloat);
    }
    if (msg.sampleDouble != undefined) {
      writer.writeDouble(15, msg.sampleDouble);
    }
    if (msg.sampleTimestamp != undefined) {
      writer.writeMessage(
        17,
        msg.sampleTimestamp,
        protoscript.Timestamp._writeMessage,
      );
    }
    if (msg.sampleDuration != undefined) {
      writer.writeMessage(
        18,
        msg.sampleDuration,
        protoscript.Duration._writeMessage,
      );
    }
    if (msg.sampleStruct != undefined) {
      writer.writeMessage(
        19,
        msg.sampleStruct,
        protoscript.Struct._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OptionalSampleMessage,
    reader: protoscript.BinaryReader,
  ): OptionalSampleMessage {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.sampleMessage = OptionalMessage.initialize();
          reader.readMessage(msg.sampleMessage, OptionalMessage._readMessage);
          break;
        }
        case 2: {
          msg.sampleEnum = Enum._fromInt(reader.readEnum());
          break;
        }
        case 3: {
          const map = {} as OptionalSampleMessage.SampleMap;
          reader.readMessage(map, OptionalSampleMessage.SampleMap._readMessage);
          msg.sampleMap[map.key.toString()] = map.value;
          break;
        }
        case 4: {
          msg.sampleRepeated.push(reader.readString());
          break;
        }
        case 5: {
          msg.sampleBool = reader.readBool();
          break;
        }
        case 6: {
          msg.sampleString = reader.readString();
          break;
        }
        case 7: {
          msg.sampleBytes = reader.readBytes();
          break;
        }
        case 8: {
          msg.sampleInt32 = reader.readInt32();
          break;
        }
        case 9: {
          msg.sampleFixed32 = reader.readFixed32();
          break;
        }
        case 10: {
          msg.sampleUint32 = reader.readUint32();
          break;
        }
        case 11: {
          msg.sampleInt64 = BigInt(reader.readInt64String());
          break;
        }
        case 12: {
          msg.sampleFixed64 = BigInt(reader.readFixed64String());
          break;
        }
        case 13: {
          msg.sampleUint64 = BigInt(reader.readUint64String());
          break;
        }
        case 14: {
          msg.sampleFloat = reader.readFloat();
          break;
        }
        case 15: {
          msg.sampleDouble = reader.readDouble();
          break;
        }
        case 17: {
          msg.sampleTimestamp = protoscript.Timestamp.initialize();
          reader.readMessage(
            msg.sampleTimestamp,
            protoscript.Timestamp._readMessage,
          );
          break;
        }
        case 18: {
          msg.sampleDuration = protoscript.Duration.initialize();
          reader.readMessage(
            msg.sampleDuration,
            protoscript.Duration._readMessage,
          );
          break;
        }
        case 19: {
          msg.sampleStruct = protoscript.Struct.initialize();
          reader.readMessage(msg.sampleStruct, protoscript.Struct._readMessage);
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  SampleMap: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<OptionalSampleMessage.SampleMap>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: OptionalSampleMessage.SampleMap,
      reader: protoscript.BinaryReader,
    ): OptionalSampleMessage.SampleMap {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const EnumJSON = {
  FOO_BAR: "FOO_BAR",
  BAZ: "BAZ",
  /**
   * @private
   */
  _fromInt: function (i: number): Enum {
    switch (i) {
      case 0: {
        return "FOO_BAR";
      }
      case 1: {
        return "BAZ";
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as Enum;
      }
    }
  },
  /**
   * @private
   */
  _toInt: function (i: Enum): number {
    switch (i) {
      case "FOO_BAR": {
        return 0;
      }
      case "BAZ": {
        return 1;
      }
      // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
      default: {
        return i as unknown as number;
      }
    }
  },
} as const;

export const MessageJSON = {
  /**
   * Serializes Message to JSON.
   */
  encode: function (msg: PartialDeep<Message>): string {
    return JSON.stringify(MessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes Message from JSON.
   */
  decode: function (json: string): Message {
    return MessageJSON._readMessage(MessageJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Message with all fields set to their default value.
   */
  initialize: function (): Message {
    return {
      fooBar: "",
      g: 0n,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<Message>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.fooBar) {
      json["fooBar"] = msg.fooBar;
    }
    if (msg.g) {
      json["g"] = String(msg.g);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Message, json: any): Message {
    const _fooBar_ = json["fooBar"] ?? json["foo_bar"];
    if (_fooBar_) {
      msg.fooBar = _fooBar_;
    }
    const _g_ = json["g"];
    if (_g_) {
      msg.g = BigInt(_g_);
    }
    return msg;
  },
};

export const SampleMessageJSON = {
  /**
   * Serializes SampleMessage to JSON.
   */
  encode: function (msg: PartialDeep<SampleMessage>): string {
    return JSON.stringify(SampleMessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes SampleMessage from JSON.
   */
  decode: function (json: string): SampleMessage {
    return SampleMessageJSON._readMessage(
      SampleMessageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes SampleMessage with all fields set to their default value.
   */
  initialize: function (): SampleMessage {
    return {
      sampleMessage: MessageJSON.initialize(),
      sampleEnum: Enum._fromInt(0),
      sampleMap: {},
      sampleRepeated: [],
      sampleBool: false,
      sampleString: "",
      sampleBytes: new Uint8Array(),
      sampleInt32: 0,
      sampleFixed32: 0,
      sampleUint32: 0,
      sampleInt64: 0n,
      sampleFixed64: 0n,
      sampleUint64: 0n,
      sampleFloat: 0,
      sampleDouble: 0,
      sampleTimestamp: protoscript.TimestampJSON.initialize(),
      sampleDuration: protoscript.DurationJSON.initialize(),
      sampleStruct: protoscript.StructJSON.initialize(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<SampleMessage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sampleMessage) {
      const _sampleMessage_ = MessageJSON._writeMessage(msg.sampleMessage);
      if (Object.keys(_sampleMessage_).length > 0) {
        json["sampleMessage"] = _sampleMessage_;
      }
    }
    if (msg.sampleEnum && EnumJSON._toInt(msg.sampleEnum)) {
      json["sampleEnum"] = msg.sampleEnum;
    }
    if (msg.sampleMap) {
      const _sampleMap_ = Object.fromEntries(
        Object.entries(msg.sampleMap)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(SampleMessageJSON.SampleMap._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_sampleMap_).length > 0) {
        json["sampleMap"] = _sampleMap_;
      }
    }
    if (msg.sampleRepeated?.length) {
      json["sampleRepeated"] = msg.sampleRepeated;
    }
    if (msg.sampleBool) {
      json["sampleBool"] = msg.sampleBool;
    }
    if (msg.sampleString) {
      json["sampleString"] = msg.sampleString;
    }
    if (msg.sampleBytes?.length) {
      json["sampleBytes"] = protoscript.serializeBytes(msg.sampleBytes);
    }
    if (msg.sampleInt32) {
      json["sampleInt32"] = msg.sampleInt32;
    }
    if (msg.sampleFixed32) {
      json["sampleFixed32"] = msg.sampleFixed32;
    }
    if (msg.sampleUint32) {
      json["sampleUint32"] = msg.sampleUint32;
    }
    if (msg.sampleInt64) {
      json["sampleInt64"] = String(msg.sampleInt64);
    }
    if (msg.sampleFixed64) {
      json["sampleFixed64"] = String(msg.sampleFixed64);
    }
    if (msg.sampleUint64) {
      json["sampleUint64"] = String(msg.sampleUint64);
    }
    if (msg.sampleFloat) {
      json["sampleFloat"] = msg.sampleFloat;
    }
    if (msg.sampleDouble) {
      json["sampleDouble"] = msg.sampleDouble;
    }
    if (
      msg.sampleTimestamp &&
      msg.sampleTimestamp.seconds &&
      msg.sampleTimestamp.nanos
    ) {
      json["sampleTimestamp"] = protoscript.serializeTimestamp(
        msg.sampleTimestamp,
      );
    }
    if (
      msg.sampleDuration &&
      msg.sampleDuration.seconds &&
      msg.sampleDuration.nanos
    ) {
      json["sampleDuration"] = protoscript.serializeDuration(
        msg.sampleDuration,
      );
    }
    if (msg.sampleStruct) {
      const _sampleStruct_ = protoscript.StructJSON._writeMessage(
        msg.sampleStruct,
      );
      if (Object.keys(_sampleStruct_).length > 0) {
        json["sampleStruct"] = _sampleStruct_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: SampleMessage, json: any): SampleMessage {
    const _sampleMessage_ = json["sampleMessage"] ?? json["sample_message"];
    if (_sampleMessage_) {
      MessageJSON._readMessage(msg.sampleMessage, _sampleMessage_);
    }
    const _sampleEnum_ = json["sampleEnum"] ?? json["sample_enum"];
    if (_sampleEnum_) {
      msg.sampleEnum = Enum._fromInt(_sampleEnum_);
    }
    const _sampleMap_ = json["sampleMap"] ?? json["sample_map"];
    if (_sampleMap_) {
      msg.sampleMap = Object.fromEntries(
        Object.entries(_sampleMap_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(SampleMessageJSON.SampleMap._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _sampleRepeated_ = json["sampleRepeated"] ?? json["sample_repeated"];
    if (_sampleRepeated_) {
      msg.sampleRepeated = _sampleRepeated_;
    }
    const _sampleBool_ = json["sampleBool"] ?? json["sample_bool"];
    if (_sampleBool_) {
      msg.sampleBool = _sampleBool_;
    }
    const _sampleString_ = json["sampleString"] ?? json["sample_string"];
    if (_sampleString_) {
      msg.sampleString = _sampleString_;
    }
    const _sampleBytes_ = json["sampleBytes"] ?? json["sample_bytes"];
    if (_sampleBytes_) {
      msg.sampleBytes = protoscript.parseBytes(_sampleBytes_);
    }
    const _sampleInt32_ = json["sampleInt32"] ?? json["sample_int32"];
    if (_sampleInt32_) {
      msg.sampleInt32 = protoscript.parseNumber(_sampleInt32_);
    }
    const _sampleFixed32_ = json["sampleFixed32"] ?? json["sample_fixed32"];
    if (_sampleFixed32_) {
      msg.sampleFixed32 = protoscript.parseNumber(_sampleFixed32_);
    }
    const _sampleUint32_ = json["sampleUint32"] ?? json["sample_uint32"];
    if (_sampleUint32_) {
      msg.sampleUint32 = protoscript.parseNumber(_sampleUint32_);
    }
    const _sampleInt64_ = json["sampleInt64"] ?? json["sample_int64"];
    if (_sampleInt64_) {
      msg.sampleInt64 = BigInt(_sampleInt64_);
    }
    const _sampleFixed64_ = json["sampleFixed64"] ?? json["sample_fixed64"];
    if (_sampleFixed64_) {
      msg.sampleFixed64 = BigInt(_sampleFixed64_);
    }
    const _sampleUint64_ = json["sampleUint64"] ?? json["sample_uint64"];
    if (_sampleUint64_) {
      msg.sampleUint64 = BigInt(_sampleUint64_);
    }
    const _sampleFloat_ = json["sampleFloat"] ?? json["sample_float"];
    if (_sampleFloat_) {
      msg.sampleFloat = protoscript.parseDouble(_sampleFloat_);
    }
    const _sampleDouble_ = json["sampleDouble"] ?? json["sample_double"];
    if (_sampleDouble_) {
      msg.sampleDouble = protoscript.parseDouble(_sampleDouble_);
    }
    const _sampleTimestamp_ =
      json["sampleTimestamp"] ?? json["sample_timestamp"];
    if (_sampleTimestamp_) {
      msg.sampleTimestamp = protoscript.parseTimestamp(_sampleTimestamp_);
    }
    const _sampleDuration_ = json["sampleDuration"] ?? json["sample_duration"];
    if (_sampleDuration_) {
      msg.sampleDuration = protoscript.parseDuration(_sampleDuration_);
    }
    const _sampleStruct_ = json["sampleStruct"] ?? json["sample_struct"];
    if (_sampleStruct_) {
      protoscript.StructJSON._readMessage(msg.sampleStruct, _sampleStruct_);
    }
    return msg;
  },

  SampleMap: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<SampleMessage.SampleMap>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: SampleMessage.SampleMap,
      json: any,
    ): SampleMessage.SampleMap {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },
};

export const OptionalMessageJSON = {
  /**
   * Serializes OptionalMessage to JSON.
   */
  encode: function (msg: PartialDeep<OptionalMessage>): string {
    return JSON.stringify(OptionalMessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes OptionalMessage from JSON.
   */
  decode: function (json: string): OptionalMessage {
    return OptionalMessageJSON._readMessage(
      OptionalMessageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes OptionalMessage with all fields set to their default value.
   */
  initialize: function (): OptionalMessage {
    return {
      fooBar: undefined,
      g: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OptionalMessage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.fooBar != undefined) {
      json["fooBar"] = msg.fooBar;
    }
    if (msg.g != undefined) {
      json["g"] = String(msg.g);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: OptionalMessage, json: any): OptionalMessage {
    const _fooBar_ = json["fooBar"] ?? json["foo_bar"];
    if (_fooBar_) {
      msg.fooBar = _fooBar_;
    }
    const _g_ = json["g"];
    if (_g_) {
      msg.g = BigInt(_g_);
    }
    return msg;
  },
};

export const OptionalSampleMessageJSON = {
  /**
   * Serializes OptionalSampleMessage to JSON.
   */
  encode: function (msg: PartialDeep<OptionalSampleMessage>): string {
    return JSON.stringify(OptionalSampleMessageJSON._writeMessage(msg));
  },

  /**
   * Deserializes OptionalSampleMessage from JSON.
   */
  decode: function (json: string): OptionalSampleMessage {
    return OptionalSampleMessageJSON._readMessage(
      OptionalSampleMessageJSON.initialize(),
      JSON.parse(json),
    );
  },

  /**
   * Initializes OptionalSampleMessage with all fields set to their default value.
   */
  initialize: function (): OptionalSampleMessage {
    return {
      sampleMessage: undefined,
      sampleEnum: undefined,
      sampleMap: {},
      sampleRepeated: [],
      sampleBool: undefined,
      sampleString: undefined,
      sampleBytes: undefined,
      sampleInt32: undefined,
      sampleFixed32: undefined,
      sampleUint32: undefined,
      sampleInt64: undefined,
      sampleFixed64: undefined,
      sampleUint64: undefined,
      sampleFloat: undefined,
      sampleDouble: undefined,
      sampleTimestamp: undefined,
      sampleDuration: undefined,
      sampleStruct: undefined,
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<OptionalSampleMessage>,
  ): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.sampleMessage != undefined) {
      const _sampleMessage_ = OptionalMessageJSON._writeMessage(
        msg.sampleMessage,
      );
      json["sampleMessage"] = _sampleMessage_;
    }
    if (msg.sampleEnum != undefined) {
      json["sampleEnum"] = msg.sampleEnum;
    }
    if (msg.sampleMap) {
      const _sampleMap_ = Object.fromEntries(
        Object.entries(msg.sampleMap)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(OptionalSampleMessageJSON.SampleMap._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_sampleMap_).length > 0) {
        json["sampleMap"] = _sampleMap_;
      }
    }
    if (msg.sampleRepeated?.length) {
      json["sampleRepeated"] = msg.sampleRepeated;
    }
    if (msg.sampleBool != undefined) {
      json["sampleBool"] = msg.sampleBool;
    }
    if (msg.sampleString != undefined) {
      json["sampleString"] = msg.sampleString;
    }
    if (msg.sampleBytes?.length) {
      json["sampleBytes"] = protoscript.serializeBytes(msg.sampleBytes);
    }
    if (msg.sampleInt32 != undefined) {
      json["sampleInt32"] = msg.sampleInt32;
    }
    if (msg.sampleFixed32 != undefined) {
      json["sampleFixed32"] = msg.sampleFixed32;
    }
    if (msg.sampleUint32 != undefined) {
      json["sampleUint32"] = msg.sampleUint32;
    }
    if (msg.sampleInt64 != undefined) {
      json["sampleInt64"] = String(msg.sampleInt64);
    }
    if (msg.sampleFixed64 != undefined) {
      json["sampleFixed64"] = String(msg.sampleFixed64);
    }
    if (msg.sampleUint64 != undefined) {
      json["sampleUint64"] = String(msg.sampleUint64);
    }
    if (msg.sampleFloat != undefined) {
      json["sampleFloat"] = msg.sampleFloat;
    }
    if (msg.sampleDouble != undefined) {
      json["sampleDouble"] = msg.sampleDouble;
    }
    if (msg.sampleTimestamp != undefined) {
      json["sampleTimestamp"] = protoscript.serializeTimestamp(
        msg.sampleTimestamp,
      );
    }
    if (msg.sampleDuration != undefined) {
      json["sampleDuration"] = protoscript.serializeDuration(
        msg.sampleDuration,
      );
    }
    if (msg.sampleStruct != undefined) {
      const _sampleStruct_ = protoscript.StructJSON._writeMessage(
        msg.sampleStruct,
      );
      json["sampleStruct"] = _sampleStruct_;
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (
    msg: OptionalSampleMessage,
    json: any,
  ): OptionalSampleMessage {
    const _sampleMessage_ = json["sampleMessage"] ?? json["sample_message"];
    if (_sampleMessage_) {
      msg.sampleMessage = OptionalMessageJSON.initialize();
      OptionalMessageJSON._readMessage(msg.sampleMessage, _sampleMessage_);
    }
    const _sampleEnum_ = json["sampleEnum"] ?? json["sample_enum"];
    if (_sampleEnum_) {
      msg.sampleEnum = Enum._fromInt(_sampleEnum_);
    }
    const _sampleMap_ = json["sampleMap"] ?? json["sample_map"];
    if (_sampleMap_) {
      msg.sampleMap = Object.fromEntries(
        Object.entries(_sampleMap_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(OptionalSampleMessageJSON.SampleMap._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    const _sampleRepeated_ = json["sampleRepeated"] ?? json["sample_repeated"];
    if (_sampleRepeated_) {
      msg.sampleRepeated = _sampleRepeated_;
    }
    const _sampleBool_ = json["sampleBool"] ?? json["sample_bool"];
    if (_sampleBool_) {
      msg.sampleBool = _sampleBool_;
    }
    const _sampleString_ = json["sampleString"] ?? json["sample_string"];
    if (_sampleString_) {
      msg.sampleString = _sampleString_;
    }
    const _sampleBytes_ = json["sampleBytes"] ?? json["sample_bytes"];
    if (_sampleBytes_) {
      msg.sampleBytes = protoscript.parseBytes(_sampleBytes_);
    }
    const _sampleInt32_ = json["sampleInt32"] ?? json["sample_int32"];
    if (_sampleInt32_) {
      msg.sampleInt32 = protoscript.parseNumber(_sampleInt32_);
    }
    const _sampleFixed32_ = json["sampleFixed32"] ?? json["sample_fixed32"];
    if (_sampleFixed32_) {
      msg.sampleFixed32 = protoscript.parseNumber(_sampleFixed32_);
    }
    const _sampleUint32_ = json["sampleUint32"] ?? json["sample_uint32"];
    if (_sampleUint32_) {
      msg.sampleUint32 = protoscript.parseNumber(_sampleUint32_);
    }
    const _sampleInt64_ = json["sampleInt64"] ?? json["sample_int64"];
    if (_sampleInt64_) {
      msg.sampleInt64 = BigInt(_sampleInt64_);
    }
    const _sampleFixed64_ = json["sampleFixed64"] ?? json["sample_fixed64"];
    if (_sampleFixed64_) {
      msg.sampleFixed64 = BigInt(_sampleFixed64_);
    }
    const _sampleUint64_ = json["sampleUint64"] ?? json["sample_uint64"];
    if (_sampleUint64_) {
      msg.sampleUint64 = BigInt(_sampleUint64_);
    }
    const _sampleFloat_ = json["sampleFloat"] ?? json["sample_float"];
    if (_sampleFloat_) {
      msg.sampleFloat = protoscript.parseDouble(_sampleFloat_);
    }
    const _sampleDouble_ = json["sampleDouble"] ?? json["sample_double"];
    if (_sampleDouble_) {
      msg.sampleDouble = protoscript.parseDouble(_sampleDouble_);
    }
    const _sampleTimestamp_ =
      json["sampleTimestamp"] ?? json["sample_timestamp"];
    if (_sampleTimestamp_) {
      msg.sampleTimestamp = protoscript.parseTimestamp(_sampleTimestamp_);
    }
    const _sampleDuration_ = json["sampleDuration"] ?? json["sample_duration"];
    if (_sampleDuration_) {
      msg.sampleDuration = protoscript.parseDuration(_sampleDuration_);
    }
    const _sampleStruct_ = json["sampleStruct"] ?? json["sample_struct"];
    if (_sampleStruct_) {
      msg.sampleStruct = protoscript.StructJSON.initialize();
      protoscript.StructJSON._readMessage(msg.sampleStruct, _sampleStruct_);
    }
    return msg;
  },

  SampleMap: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<OptionalSampleMessage.SampleMap>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: OptionalSampleMessage.SampleMap,
      json: any,
    ): OptionalSampleMessage.SampleMap {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },
};
