// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: google/protobuf/any.proto
/* eslint-disable */

import type { ByteSource } from "protoscript";
import {
  BinaryReader,
  BinaryWriter,
  encodeBase64Bytes,
  decodeBase64Bytes,
} from "protoscript";

//========================================//
//                 Types                  //
//========================================//

/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a
 * URL that describes the type of the serialized message.
 *
 * Protobuf library provides support to pack/unpack Any values in the form
 * of utility functions or additional generated methods of the Any type.
 *
 * Example 1: Pack and unpack a message in C++.
 *
 *     Foo foo = ...;
 *     Any any;
 *     any.PackFrom(foo);
 *     ...
 *     if (any.UnpackTo(&foo)) {
 *       ...
 *     }
 *
 * Example 2: Pack and unpack a message in Java.
 *
 *     Foo foo = ...;
 *     Any any = Any.pack(foo);
 *     ...
 *     if (any.is(Foo.class)) {
 *       foo = any.unpack(Foo.class);
 *     }
 *
 * Example 3: Pack and unpack a message in Python.
 *
 *     foo = Foo(...)
 *     any = Any()
 *     any.Pack(foo)
 *     ...
 *     if any.Is(Foo.DESCRIPTOR):
 *       any.Unpack(foo)
 *       ...
 *
 * Example 4: Pack and unpack a message in Go
 *
 *      foo := &pb.Foo{...}
 *      any, err := anypb.New(foo)
 *      if err != nil {
 *        ...
 *      }
 *      ...
 *      foo := &pb.Foo{}
 *      if err := any.UnmarshalTo(foo); err != nil {
 *        ...
 *      }
 *
 * The pack methods provided by protobuf library will by default use
 * 'type.googleapis.com/full.type.name' as the type URL and the unpack
 * methods only use the fully qualified type name after the last '/'
 * in the type URL, for example "foo.bar.com/x/y.z" will yield type
 * name "y.z".
 *
 *
 * JSON
 *
 * The JSON representation of an `Any` value uses the regular
 * representation of the deserialized, embedded message, with an
 * additional field `@type` which contains the type URL. Example:
 *
 *     package google.profile;
 *     message Person {
 *       string first_name = 1;
 *       string last_name = 2;
 *     }
 *
 *     {
 *       "@type": "type.googleapis.com/google.profile.Person",
 *       "firstName": <string>,
 *       "lastName": <string>
 *     }
 *
 * If the embedded message type is well-known and has a custom JSON
 * representation, that representation will be embedded adding a field
 * `value` which holds the custom JSON in addition to the `@type`
 * field. Example (for message [google.protobuf.Duration][]):
 *
 *     {
 *       "@type": "type.googleapis.com/google.protobuf.Duration",
 *       "value": "1.212s"
 *     }
 *
 */
export interface Any {
  /**
   * A URL/resource name that uniquely identifies the type of the serialized
   * protocol buffer message. This string must contain at least
   * one "/" character. The last segment of the URL's path must represent
   * the fully qualified name of the type (as in
   * `path/google.protobuf.Duration`). The name should be in a canonical form
   * (e.g., leading "." is not accepted).
   *
   * In practice, teams usually precompile into the binary all types that they
   * expect it to use in the context of Any. However, for URLs which use the
   * scheme `http`, `https`, or no scheme, one can optionally set up a type
   * server that maps type URLs to message definitions as follows:
   *
   * * If no scheme is provided, `https` is assumed.
   * * An HTTP GET on the URL must yield a [google.protobuf.Type][]
   *   value in binary format, or produce an error.
   * * Applications are allowed to cache lookup results based on the
   *   URL, or have them precompiled into a binary to avoid any
   *   lookup. Therefore, binary compatibility needs to be preserved
   *   on changes to types. (Use versioned type names to manage
   *   breaking changes.)
   *
   * Note: this functionality is not currently available in the official
   * protobuf release, and it is not used for type URLs beginning with
   * type.googleapis.com.
   *
   * Schemes other than `http`, `https` (or the empty scheme) might be
   * used with implementation specific semantics.
   *
   */
  typeUrl: string;
  /**
   * Must be a valid serialized protocol buffer of the above specified type.
   */
  value: Uint8Array;
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const Any = {
  /**
   * Serializes Any to protobuf.
   */
  encode: function (msg: Partial<Any>): Uint8Array {
    return Any._writeMessage(msg, new BinaryWriter()).getResultBuffer();
  },

  /**
   * Deserializes Any from protobuf.
   */
  decode: function (bytes: ByteSource): Any {
    return Any._readMessage(Any.initialize(), new BinaryReader(bytes));
  },

  /**
   * Initializes Any with all fields set to their default value.
   */
  initialize: function (): Any {
    return {
      typeUrl: "",
      value: new Uint8Array(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: Partial<Any>,
    writer: BinaryWriter
  ): BinaryWriter {
    if (msg.typeUrl) {
      writer.writeString(1, msg.typeUrl);
    }
    if (msg.value?.length) {
      writer.writeBytes(2, msg.value);
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Any, reader: BinaryReader): Any {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.typeUrl = reader.readString();
          break;
        }
        case 2: {
          msg.value = reader.readBytes();
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const AnyJSON = {
  /**
   * Serializes Any to JSON.
   */
  encode: function (msg: Partial<Any>): string {
    return JSON.stringify(AnyJSON._writeMessage(msg));
  },

  /**
   * Deserializes Any from JSON.
   */
  decode: function (json: string): Any {
    return AnyJSON._readMessage(AnyJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes Any with all fields set to their default value.
   */
  initialize: function (): Any {
    return {
      typeUrl: "",
      value: new Uint8Array(),
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<Any>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.typeUrl) {
      json["typeUrl"] = msg.typeUrl;
    }
    if (msg.value?.length) {
      json["value"] = encodeBase64Bytes(msg.value);
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: Any, json: any): Any {
    const _typeUrl_ = json["typeUrl"] ?? json["type_url"];
    if (_typeUrl_) {
      msg.typeUrl = _typeUrl_;
    }
    const _value_ = json["value"];
    if (_value_) {
      msg.value = decodeBase64Bytes(_value_);
    }
    return msg;
  },
};
