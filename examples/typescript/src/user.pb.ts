// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: src/user.proto
/* eslint-disable */

import type { ByteSource, PartialDeep } from "protoscript";
import * as protoscript from "protoscript";

//========================================//
//                 Types                  //
//========================================//

export interface User {
  firstName: string;
  lastName: string;
  active: boolean;
  manager: User | null | undefined;
  locations: string[];
  projects: Record<string, User.Projects["value"] | undefined>;
}

export declare namespace User {
  interface Projects {
    key: string;
    value: string;
  }
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const User = {
  /**
   * Serializes User to protobuf.
   */
  encode: function (msg: PartialDeep<User>): Uint8Array {
    return User._writeMessage(
      msg,
      new protoscript.BinaryWriter(),
    ).getResultBuffer();
  },

  /**
   * Deserializes User from protobuf.
   */
  decode: function (bytes: ByteSource): User {
    return User._readMessage(
      User.initialize(),
      new protoscript.BinaryReader(bytes),
    );
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      firstName: "",
      lastName: "",
      active: false,
      manager: undefined,
      locations: [],
      projects: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (
    msg: PartialDeep<User>,
    writer: protoscript.BinaryWriter,
  ): protoscript.BinaryWriter {
    if (msg.firstName) {
      writer.writeString(1, msg.firstName);
    }
    if (msg.lastName) {
      writer.writeString(2, msg.lastName);
    }
    if (msg.active) {
      writer.writeBool(3, msg.active);
    }
    if (msg.manager) {
      writer.writeMessage(4, msg.manager, User._writeMessage);
    }
    if (msg.locations?.length) {
      writer.writeRepeatedString(5, msg.locations);
    }
    if (msg.projects) {
      writer.writeRepeatedMessage(
        6,
        Object.entries(msg.projects).map(([key, value]) => ({
          key: key as any,
          value: value as any,
        })) as any,
        User.Projects._writeMessage,
      );
    }
    return writer;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, reader: protoscript.BinaryReader): User {
    while (reader.nextField()) {
      const field = reader.getFieldNumber();
      switch (field) {
        case 1: {
          msg.firstName = reader.readString();
          break;
        }
        case 2: {
          msg.lastName = reader.readString();
          break;
        }
        case 3: {
          msg.active = reader.readBool();
          break;
        }
        case 4: {
          msg.manager = User.initialize();
          reader.readMessage(msg.manager, User._readMessage);
          break;
        }
        case 5: {
          msg.locations.push(reader.readString());
          break;
        }
        case 6: {
          const map = {} as User.Projects;
          reader.readMessage(map, User.Projects._readMessage);
          msg.projects[map.key.toString()] = map.value;
          break;
        }
        default: {
          reader.skipField();
          break;
        }
      }
    }
    return msg;
  },

  Projects: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<User.Projects>,
      writer: protoscript.BinaryWriter,
    ): protoscript.BinaryWriter {
      if (msg.key) {
        writer.writeString(1, msg.key);
      }
      if (msg.value) {
        writer.writeString(2, msg.value);
      }
      return writer;
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: User.Projects,
      reader: protoscript.BinaryReader,
    ): User.Projects {
      while (reader.nextField()) {
        const field = reader.getFieldNumber();
        switch (field) {
          case 1: {
            msg.key = reader.readString();
            break;
          }
          case 2: {
            msg.value = reader.readString();
            break;
          }
          default: {
            reader.skipField();
            break;
          }
        }
      }
      return msg;
    },
  },
};

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const UserJSON = {
  /**
   * Serializes User to JSON.
   */
  encode: function (msg: PartialDeep<User>): string {
    return JSON.stringify(UserJSON._writeMessage(msg));
  },

  /**
   * Deserializes User from JSON.
   */
  decode: function (json: string): User {
    return UserJSON._readMessage(UserJSON.initialize(), JSON.parse(json));
  },

  /**
   * Initializes User with all fields set to their default value.
   */
  initialize: function (): User {
    return {
      firstName: "",
      lastName: "",
      active: false,
      manager: undefined,
      locations: [],
      projects: {},
    };
  },

  /**
   * @private
   */
  _writeMessage: function (msg: PartialDeep<User>): Record<string, unknown> {
    const json: Record<string, unknown> = {};
    if (msg.firstName) {
      json["firstName"] = msg.firstName;
    }
    if (msg.lastName) {
      json["lastName"] = msg.lastName;
    }
    if (msg.active) {
      json["active"] = msg.active;
    }
    if (msg.manager) {
      const _manager_ = UserJSON._writeMessage(msg.manager);
      if (Object.keys(_manager_).length > 0) {
        json["manager"] = _manager_;
      }
    }
    if (msg.locations?.length) {
      json["locations"] = msg.locations;
    }
    if (msg.projects) {
      const _projects_ = Object.fromEntries(
        Object.entries(msg.projects)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(UserJSON.Projects._writeMessage)
          .map(({ key, value }) => [key, value]),
      );
      if (Object.keys(_projects_).length > 0) {
        json["projects"] = _projects_;
      }
    }
    return json;
  },

  /**
   * @private
   */
  _readMessage: function (msg: User, json: any): User {
    const _firstName_ = json["firstName"] ?? json["first_name"];
    if (_firstName_) {
      msg.firstName = _firstName_;
    }
    const _lastName_ = json["lastName"] ?? json["last_name"];
    if (_lastName_) {
      msg.lastName = _lastName_;
    }
    const _active_ = json["active"];
    if (_active_) {
      msg.active = _active_;
    }
    const _manager_ = json["manager"];
    if (_manager_) {
      msg.manager = UserJSON.initialize();
      UserJSON._readMessage(msg.manager, _manager_);
    }
    const _locations_ = json["locations"];
    if (_locations_) {
      msg.locations = _locations_;
    }
    const _projects_ = json["projects"];
    if (_projects_) {
      msg.projects = Object.fromEntries(
        Object.entries(_projects_)
          .map(([key, value]) => ({ key: key as any, value: value as any }))
          .map(UserJSON.Projects._readMessage)
          .map(({ key, value }) => [key, value]),
      );
    }
    return msg;
  },

  Projects: {
    /**
     * @private
     */
    _writeMessage: function (
      msg: PartialDeep<User.Projects>,
    ): Record<string, unknown> {
      const json: Record<string, unknown> = {};
      if (msg.key) {
        json["key"] = msg.key;
      }
      if (msg.value) {
        json["value"] = msg.value;
      }
      return json;
    },

    /**
     * @private
     */
    _readMessage: function (msg: User.Projects, json: any): User.Projects {
      const _key_ = json["key"];
      if (_key_) {
        msg.key = _key_;
      }
      const _value_ = json["value"];
      if (_value_) {
        msg.value = _value_;
      }
      return msg;
    },
  },
};
